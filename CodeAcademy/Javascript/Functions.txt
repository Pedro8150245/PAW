FUNCTIONS
*********



Arrow function



let orderCount = 0;

const takeOrder = (topping,crustType) => {
  console.log("Order: "+crustType+"pizza topped with "+topping);
  orderCount++;
}

const getSubTotal = (itemCount) => {
  return itemCount * 7.5;
}

const getTax = (orderCount) => {
  return getSubTotal(orderCount) * 0.06;
}

const getTotal = () => {
  return getSubTotal(orderCount) + getTax(orderCount);
}

takeOrder("bacon","thin crust");
takeOrder("bacon","thin crust");
takeOrder("bacon","thin crust");



console.log(getTotal());




------------------------------------------------------------------------------------------------------------------------------


Function Declarations



function isGreaterThan(numberOne,numberTwo){
  if(numberOne > numberTwo){
    return true;
  }else{
    return false;
  }
}


console.log(isGreaterThan(5,8));





------------------------------------------------------------------------------------------------------------------------------


Function Expressions




const square = function (number) {
  return number * number;
};

console.log(square(5));
// Output: 25.




Arrow Function:


const square = (number) => {
  return number * number;
};

console.log(square(5));
// Output: 25.






------------------------------------------------------------------------------------------------------------------------------



Arrow Functions - Refactor




const volumeOfSphere = (diameter) => {
  return (1/6) * Math.PI * diameter * diameter * diameter;
};

console.log('The volume of a sphere is ' + volumeOfSphere(10) + ' cubic centimeters');





Refactored:



const volumeOfSphere = diameter => (1/6) * Math.PI * diameter * diameter * diameter;

console.log('The volume of a sphere is ' + volumeOfSphere(10) + ' cubic centimeters');




------------------------------------------------------------------------------------------------------------------------------



Review Functions

This unit introduced you to functions.

Functions are written to perform a task.

Functions take data, perform a set of tasks on the data, and then return the result.

We can define parameters to be used when calling the function.

When calling a function, we can pass in arguments, which will set the function's parameters.

We can use return to return the result of a function which allows us to call functions anywhere, even inside other functions.














